require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe ItemHistoriesController do

  # This should return the minimal set of attributes required to create a valid
  # ItemHistory. As you add validations to ItemHistory, be sure to
  # update the return value of this method accordingly.
  def valid_attributes
    {}
  end

  describe "GET index" do
it "assigns all item_histories as @item_histories"# do
#     item_history = ItemHistory.create! valid_attributes
#     get :index
#     assigns(:item_histories).should eq([item_history])
#   end
  end

  describe "GET show" do
  it "assigns the requested item_history as @item_history" #do
#    item_history = ItemHistory.create! valid_attributes
#     get :show, :id => item_history.id.to_s
#     assigns(:item_history).should eq(item_history)
#   end
  end

  describe "GET new" do
    it "assigns a new item_history as @item_history" #do
#  get :new
#      assigns(:item_history).should be_a_new(ItemHistory)
#    end
  end

  describe "GET edit" do
    it "assigns the requested item_history as @item_history" #do
#   item_history = ItemHistory.create! valid_attributes
#     get :edit, :id => item_history.id.to_s
#     assigns(:item_history).should eq(item_history)
#   end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new ItemHistory"# do
#  expect {
#          post :create, :item_history => valid_attributes
#        }.to change(ItemHistory, :count).by(1)
#      end

      it "assigns a newly created item_history as @item_history" #do
#       post :create, :item_history => valid_attributes
#        assigns(:item_history).should be_a(ItemHistory)
#        assigns(:item_history).should be_persisted
#      end

      it "redirects to the created item_history" #do
#        post :create, :item_history => valid_attributes
#        response.should redirect_to(ItemHistory.last)
#      end
    end

    describe "with invalid params" do
     it "assigns a newly created but unsaved item_history as @item_history" #do
        # Trigger the behavior that occurs when invalid params are submitted
#   ItemHistory.any_instance.stub(:save).and_return(false)
#        post :create, :item_history => {}
#        assigns(:item_history).should be_a_new(ItemHistory)
#      end

      it "re-renders the 'new' template" #do
        # Trigger the behavior that occurs when invalid params are submitted
#  ItemHistory.any_instance.stub(:save).and_return(false)
#        post :create, :item_history => {}
#        response.should render_template("new")
#      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested item_history" #do
#       item_history = ItemHistory.create! valid_attributes
        # Assuming there are no other item_histories in the database, this
        # specifies that the ItemHistory created on the previous line
        # receives the :update_attributes message with whatever params are
        # submitted in the request.
#       ItemHistory.any_instance.should_receive(:update_attributes).with({'these' => 'params'})
#       put :update, :id => item_history.id, :item_history => {'these' => 'params'}
#     end

      it "assigns the requested item_history as @item_history" #do
#        item_history = ItemHistory.create! valid_attributes
#       put :update, :id => item_history.id, :item_history => valid_attributes
#       assigns(:item_history).should eq(item_history)
#      end

      it "redirects to the item_history" #do
#       item_history = ItemHistory.create! valid_attributes
#        put :update, :id => item_history.id, :item_history => valid_attributes
#       response.should redirect_to(item_history)
#      end
    end

    describe "with invalid params" do
      it "assigns the item_history as @item_history" #do
#  item_history = ItemHistory.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
#        ItemHistory.any_instance.stub(:save).and_return(false)
#       put :update, :id => item_history.id.to_s, :item_history => {}
#       assigns(:item_history).should eq(item_history)
#     end

      it "re-renders the 'edit' template" #do
#       item_history = ItemHistory.create! valid_attributes
#       # Trigger the behavior that occurs when invalid params are submitted
#       ItemHistory.any_instance.stub(:save).and_return(false)
#       put :update, :id => item_history.id.to_s, :item_history => {}
#       response.should render_template("edit")
#     end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested item_history" #do
#item_history = ItemHistory.create! valid_attributes
#     expect {
#       delete :destroy, :id => item_history.id.to_s
#     }.to change(ItemHistory, :count).by(-1)
#   end

    it "redirects to the item_histories list" #do
#     item_history = ItemHistory.create! valid_attributes
#  delete :destroy, :id => item_history.id.to_s
#     response.should redirect_to(item_histories_url)
#   end
  end

end
